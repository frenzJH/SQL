/*To do this project, I had to download Spotify data from Kaggle.*/
/*Then, I created a new table within SQL Lite Studio database called Spotifydata with these variables and their attributes:
        CREATE TABLE BIT_DB.Spotifydata (
        id integer PRIMARY KEY,
        artist_name varchar NOT NULL,
        track_name varchar NOT NULL,
        track_id varchar NOT NULL,
        popularity integer NOT NULL,
        danceability decimal(4,3) NOT NULL,
        energy decimal(4,3) NOT NULL,
        song_key integer NOT NULL,
        loudness decimal(5,3) NOT NULL,
        song_mode integer NOT NULL,
        speechiness decimal(5,4) NOT NULL,
        acousticness decimal(6,5) NOT NULL,
        instrumentalness decimal(8,7) NOT NULL,
        liveness decimal(5,4) NOT NULL,
        valence decimal(4,3) NOT NULL,
        tempo decimal(6,3) NOT NULL,
        duration_ms integer NOT NULL,
        time_signature integer NOT NULL )
*/
/* After creating the table, I loaded the .csv file that contains the data for the Top 50 songs of 2021 from Kraggle into the table.


/*These are the questions I came up with, and the insights I have gathered from the SQL queries.*/
/*What is the average song duration (in seconds) of the top 10 most popular songs? */
SELECT AVG(duration_ms) * 0.001 as Seconds
FROM (SELECT distinct duration_ms
      FROM BIT_DB.Spotifydata
      ORDER BY popularity desc
      LIMIT 10);

/*Which artist(s) had more than one song in the 2021 top 50 charts and how many tracks by each artist? */
SELECT artist_name, COUNT(track_name) as NumberOfSongs
FROM BIT_DB.Spotifydata
GROUP BY artist_name
HAVING COUNT(track_name) >= 2
ORDER BY COUNT(track_name) desc;

/*What song by which artist is the loudest in the top 50?*/
SELECT track_name, artist_name, MAX(loudness)
FROM BIT_DB.Spotifydata;

/*Which song by which artist has the highest energy, AND the highest danceability?*/
SELECT track_name, artist_name, MAX(energy), MAX(danceability)
FROM BIT_DB.Spotifydata;

/*What song by which artist sounds the happiest, and cheerful?*/
SELECT track_name, artist_name, MAX(valence)
FROM BIT_DB.Spotifydata;

/*What song sounds the most melancholy?*/
SELECT track_name, artist_name, MIN(valence)
FROM BIT_DB.Spotifydata;

/*Which songs by which artists had tempo ABOVE 120 bpm, and what are the tempos for each song?*/
SELECT track_name, artist_name, tempo
FROM BIT_DB.Spotifydata
WHERE tempo >= 120
ORDER BY tempo;

/*Which songs by which artists had tempo BELOW 120 bpm, and what are the tempos for each song?*/
SELECT track_name, artist_name, tempo
FROM BIT_DB.Spotifydata
WHERE tempo <= 120
ORDER BY tempo desc;

/*Which songs share a similar key?*/
SELECT track_name,
CASE
    WHEN song_key = 0 THEN "C"
    WHEN song_key = 1 THEN "C#/Db"
    WHEN song_key = 2 THEN "D"
    WHEN song_key = 3 THEN "D#/Eb"
    WHEN song_key = 4 THEN "E"
    WHEN song_key = 5 THEN "F"
    WHEN song_key = 6 THEN "F#/Gb"
    WHEN song_key = 7 THEN "G"
    WHEN song_key = 8 THEN "G#/Ab"
    WHEN song_key = 9 THEN "A"
    WHEN song_key = 10 THEN "A#/Bb"
    WHEN song_key = 11 THEN "B"
    ELSE "no key"
END AS "SongKey"
FROM BIT_DB.Spotifydata
GROUP BY track_name
ORDER BY song_key asc;
